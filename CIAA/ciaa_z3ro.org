* CIAA z3ro: cosas para recordar
** Compilacion y programacion del chip
      - Para compilar ~make~ donde esta el ~Makefile~ y listo(gracias a las
        magias de Eric)
      - Para cargar el firmware:
            - Primero nos conectamos con openocd: ~openocd -f libs/openocd.cfg~
            - Luego ejecutamos en otra consola: ~arm-none-eabi-gdb out/nombre_app.elf~
            - Luego abrimos un server el el puerto 3333:
                  ~target remote :3333~
            - Luego podemos cargar el binario al chip:
                  ~load~
** Application Note 0005(real time counters)
      - El EFM32 posee varios modos para consumir menos energia, uno de ellos
        es el modo *Energy Mode 2(EM2)*. En este modo todos los perifericos
        de alta velocidad son apagados, mientras que los perifericos de bajo
        consumo de energia pueden ser habilitados(LCD, LEUART, RTC). Estos
        perifericos corren a una frecuencia del oscilador baja por lo tanto
        su consumo de corriente es baja. El RTC puede ser utilizado para
        mantener un seguimiento del tiempo y para "despertar" mientras el
        micro esta en modo /sleep/
      - El EFM32 posse tres contadores de tiempo real:
            1. RTC: Real Time Counter
            2. RTCC: Real Time Counter and Calendar: incluye modo calendario
            para que sea mas facil el seguimiento de hora, dia, mes, a単o.
            Tambien incluye 128 bytes de almacenamiento de datos para todos
            los modos de energia exepto EM4S.
            3. BURTC: Backup Real Time Counter: Usa menos energia que el RTC
            y tambien funciona en el modo /backup power/(permite al EFM32 ser
            alimentado por una fuente de energia de reserva si la fuente de
            energia principal se ha da単ado o le ha sucedido algo, *ver
            Application Note 0041: /Backup Power Domain/)

        |-------+---------------+--------------------------+------------------+-----------------------------+---------------------|
        |       | Counter Width | Maximun wrap time        | Compare channels | Avaible down to energy mode | Clock Sources       |
        |-------+---------------+--------------------------+------------------+-----------------------------+---------------------|
        | RTC   | 24 bits       | 194 dias @ 1 seg tick    |                2 | EM2                         | LFRCO, LFXO, ULFRCO |
        | RTCC  | 32 bits       | 136 a単os @ 1 seg tick    |                3 | EM4H                        | LFRCO, LFXO, ULFRCO |
        | BURTC | 32 bits       | 194 dias @ 3.9 mseg tick |                1 | EM4                         | LFRCO, LFXO, ULFRCO |
        |-------+---------------+--------------------------+------------------+-----------------------------+---------------------|
      - En el ejemplo ~main_rtc_rtcc.c~ el oscilador de baja frecuencia es
        LFRCO (Low Frequency RC Oscilator) usado como fuente para el RTC. En
        este ejemplo el micro entra repetidamente en el modo de energia EM2 y
        duerme por 500 ms usando el RTC. El RTC es configurado para
        interrumpir y automaticamente resetear el contador del comparador del
        canal 0.
      - RTCC: Consiste en dos contadores, el contador principal de 32 bits:
        ~RTCC_CNT~ (~RTCC_TIME~ y ~RTCC_DATE~ en modo calendario) y un
        pre-contador de 15 bits(~RTCC_PRECNT~). Este contador puede
        utilizarse como un contador independiente, o para generar una
        frecuencia especifica para el contador principal. En ambas
        configuraciones, el pre-contador puede ser usado para generar eventos
        de comparacion o para ser capturado en el canal de comparacion como
        resultado de un evento PRS(no se que es...).
        El contador principal del ~RTCC~, ~RTCC_CNT~ tiene dos modos: modo
        normal y modo calendario, en el modo normal el contador principal
        esta disponible en ~RTCC_CNT~ y se incrementa sobre cada tick dado
        por el pre-contador. En el modo calendario el valor del contador esta
        disponible en ~RTCC_TIME~ y ~RTCC_DATE~ contando los segundos,
        minutos, horas, dia del mes, dia de la semana, meses y a単os. Todos
        ellos codificados en el formato BCD.
        El ~RTCC~ tiene una interrupcion por cada una de sus tres
        canales de ~Capture/Compare~, ~CC0~, ~CC1~ y ~CC2~. Cada uno de sus
        canales tiene una salida ~PRS~ con acciones configurables hasta que
        se realiza una comparacion exitosa. El flag de interrupcion ~CNTTICK~
        es seteado en cada tiempo en que el contador principal recibe un
        tick(cada segundo en modo calendario). En modo calendario, hay
        tambien un flag de interrupcion que es seteado en cada minuto, hora,
        dia, semana y mes.
        El ~RTCC~ esta disponible en todos los modos de energia exepto para
        ~EM4S~. Para habilitar una operacion de ~RTCC~ en ~EM4H~ el registro
        ~EMU_EM4CTRL~ en el ~EMU~ debe ser configurado. Cualquier
        interrupcion habilitada hara que el sistema "despierte" desde el 
        modo ~EM4H~ si el flag ~EM4WU~ en el registro ~RTCC_EM4WUEN~
